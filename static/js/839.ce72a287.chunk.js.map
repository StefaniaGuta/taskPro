{"version":3,"file":"static/js/839.ce72a287.chunk.js","mappings":"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","sources":["webpack://taskpro/./src/pages/NewBoard/NewBoard.module.css?0828","pages/NewBoard/NewBoard.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"BoardsSection\":\"NewBoard_BoardsSection__KfyfE\",\"task-card\":\"NewBoard_task-card__G9QkS\",\"card-without\":\"NewBoard_card-without__wzS1i\",\"card-low\":\"NewBoard_card-low__jy-lh\",\"card-medium\":\"NewBoard_card-medium__GWSxk\",\"card-high\":\"NewBoard_card-high__KwxPS\",\"card-title\":\"NewBoard_card-title__6ldYr\",\"card-description\":\"NewBoard_card-description__K3bkB\",\"ColumnsSection\":\"NewBoard_ColumnsSection__vG+Rk\",\"ulButton\":\"NewBoard_ulButton__+41ka\",\"columnName\":\"NewBoard_columnName__K+UCw\",\"dark\":\"NewBoard_dark__rRAPs\",\"violet\":\"NewBoard_violet__9SL30\",\"NameFilter\":\"NewBoard_NameFilter__qOGeP\",\"AddColumBtn\":\"NewBoard_AddColumBtn__ityAH\",\"AddCardBtn\":\"NewBoard_AddCardBtn__He+pr\",\"PriorityColor\":\"NewBoard_PriorityColor__neWKs\",\"priority-without\":\"NewBoard_priority-without__Y+AKA\",\"priority-low\":\"NewBoard_priority-low__DOqB8\",\"priority-medium\":\"NewBoard_priority-medium__z1Gsj\",\"priority-high\":\"NewBoard_priority-high__cghGg\",\"Cards\":\"NewBoard_Cards__PTi4c\",\"bottomCard\":\"NewBoard_bottomCard__KX6Gp\",\"Svgs\":\"NewBoard_Svgs__V3i27\",\"DeadlineBell\":\"NewBoard_DeadlineBell__E2enI\",\"deadlineBell-high\":\"NewBoard_deadlineBell-high__tUAOT\",\"Priority\":\"NewBoard_Priority__NzEK0\",\"Deadline\":\"NewBoard_Deadline__FusqY\",\"Column\":\"NewBoard_Column__CX01V\"};","import React, { useEffect, useState} from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Header from \"../../components/Header/Header\";\nimport FilterComponent from \"components/FilterComponent/FilterComponent\";\nimport ModalAddColumn from \"components/PopUp/ModalAddColumn/ModalAddColumn\";\nimport ModalEditColumn from \"components/PopUp/ModalEditColumn/ModalEditColumn\";\nimport ModalAddCard from '../../components/PopUp/AddCard/AddCard';\nimport ModalEditCard from \"components/PopUp/EditCard/EditCard\";\nimport MoveButton from \"components/PopUp/MoveTask/MoveTask\";\nimport images from '../../images/BgImages/images';\nimport { openModal, closeModal } from \"../../redux/modal/modalSlice\";\nimport { deleteColumn } from \"../../redux/columns/columnsOperations\";\nimport { deleteCard } from \"../../redux/cards/cardsOpeartions\";\nimport { updateLocalColumn } from \"../../redux/columns/columnSlice\";\nimport styles from \"./NewBoard.module.css\";\nimport { formatDeadline } from '../../services/formatingDate';\nimport url from '../../components/PopUp/icons.svg'\nimport { useParams } from \"react-router-dom\";\n\nconst NewBoard = () => {\n  const dispatch = useDispatch();\n  const theme = useSelector((state) => state.auth.user.theme);\n  const backgroundImage = useSelector((state) => state.boards.boards.backgroundImage);\n  const modalState = useSelector((state) => state.modal);\n  const allColumns = useSelector((state) => state.columns.columns);\n  const [filter, setFilter] = useState();\n  const [currentImage, setCurrentImage] = useState(backgroundImage);\n  const [selectedColumnId, setSelectedColumnId] = useState(null);\n  const [cardId, setCardId] = useState();\n  const { componentName } = modalState;\n  const location = useLocation();\n  const { state } = location;\n  const boardName = state?.name;\n  const params = useParams();\n  const columns = allColumns.filter((column) => column.boardName === params.boardId);\n\n  const cardsAdded = useSelector((state) => state.cards.cards || []);\n  const filteredCards = cardsAdded.filter((card) => columns.some((col) => col._id === card.columnId));\n\n  const displaynonfilteredCards = () => {\n    if (filter) {\n      const filteredCardsMaped = filteredCards.filter((card) => card.priority === filter.payload);\n      if (filter.payload === \"all\") {\n        return filteredCards\n      } else {\n        return filteredCardsMaped;\n      }\n    } else {\n        return filteredCards;\n    }\n  }\n\n  const handleOpenCardModal = (columnId) => {\n    setSelectedColumnId(columnId);\n    dispatch(openModal(\"cardModal\"));\n  };\n  \n  const openEditColumnModal = (columnId) => {\n    setSelectedColumnId(columnId);\n    dispatch(openModal(\"editColumn\"))\n  }\n  const openEditCardModal = (card) => {\n    setCardId(card)\n    dispatch(openModal(\"editCardModal\"))          \n  }\n\n  useEffect(() => {\n    const foundImage = images.find(\n      (image) =>\n        image.image === backgroundImage ||\n        image.tablet === backgroundImage ||\n        image.mobile === backgroundImage\n    );\n\n    const updateDeviceType = () => {\n      const width = window.innerWidth;\n\n      if (foundImage) {\n        if (width < 768) {\n          setCurrentImage(foundImage.mobile);\n        } else if (width < 1024) {\n          setCurrentImage(foundImage.tablet);\n        } else {\n          setCurrentImage(foundImage.image);\n        }\n      }\n    };\n\n    updateDeviceType();\n    window.addEventListener(\"resize\", updateDeviceType);\n\n    return () => window.removeEventListener(\"resize\", updateDeviceType);\n  }, [backgroundImage]);\nconst updateColumnLocally = (columnId, updatedName) => {\n    dispatch(updateLocalColumn({ id: columnId, name: updatedName }));\n  };\n  \n  return (\n    <>\n      <Header />\n      <section\n        className={`${styles.BoardsSection} ${styles[theme]}`}\n        style={{\n          backgroundImage: `url(${currentImage})`,\n        }}\n      >\n        <div className={styles.NameFilter}>\n          <h1>{boardName}</h1>\n          <FilterComponent setFilter={setFilter}/>\n        </div>\n        \n        <ul className={styles.ColumnsSection}>\n          {columns.length > 0 ? (\n            <div className={`${styles.ulButton}`}>\n            <ul>\n              {columns.map((column) => (\n                <li className={`${styles.Column} ${styles[theme]}`} key={column._id}>\n                  <h2 className={styles.columnName}> \n                    {column.name}\n                    <div style={{width: '40px', display: 'flex', justifyContent: 'space-between'}}>\n                      <svg width=\"16\" height=\"16\" onClick={() => openEditColumnModal(column._id)}>\n                        <use xlinkHref={`${url}#pencil`} />\n                      </svg>\n\n                      <svg width=\"16\" height=\"16\"onClick={(e) => {\n                        e.stopPropagation();\n                        dispatch(deleteColumn({boardName: params.boardId, id: column._id}))\n                      }}>\n                        <use xlinkHref={`${url}#bin`} />\n                      </svg>\n                    </div>  \n                  </h2>\n                  {filteredCards.length > 0 ? (\n                    <ul className={`${styles.Cards} ${styles[theme]}`}>\n                      {displaynonfilteredCards()\n                      .filter((card) => card.columnId === column._id)\n                      .map((card) => (\n                        <li key={card._id} className={`${styles[\"task-card\"]} ${styles[`card-${card.priority}`]}`}>\n                          <h2 className={styles['card-title']}>{card.title}</h2>\n                          <span className={styles['card-description']}>{card.description}</span>\n                          \n\n                          <div className={`${styles.bottomCard}`}>\n                            <div style={{display: 'flex', alignItems: 'center', gap: '5px'}}>\n                            <span className={`${styles.Priority}`}>\n                              Priority\n                              <div style={{display: 'flex', alignItems: 'center', gap: '5px'}}>\n                              <span className={`${styles.PriorityColor} ${styles[`priority-${card.priority}`]}`}></span>\n                              <h4>{card.priority}</h4>\n                              </div>\n                            </span>\n\n                            <span className={`${styles.Deadline}`}> \n                              Deadline\n                              <h4>{formatDeadline(card.deadline)}</h4>\n                            </span>\n                            </div>\n\n                            <div className={`${styles.Svgs}`}>\n                              <svg width=\"14\" height=\"16\" className={`${styles.DeadlineBell} ${styles[`deadlineBell-${card.priority}`]}`}>\n                                <use xlinkHref={`${url}#bell`} />\n                              </svg>\n                              <MoveButton boardName={params.boardId} columnId={column} cardId={card} allColumns={columns}/>\n                              <svg width=\"16\" height=\"16\" onClick={() => openEditCardModal(card)}>\n                                <use xlinkHref={`${url}#pencil`} />\n                              </svg>\n                              <svg width=\"16\" height=\"16\"\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                dispatch(deleteCard({boardName: params.boardId, id: card._id}))\n                                }}\n                              >\n                                <use xlinkHref={`${url}#bin`} />\n                              </svg>\n                            </div>\n                          </div>  \n                        </li>\n                      ))}\n                    </ul>\n                  ) : (\n                    <p></p>\n                  )}\n                  <button className={styles.AddCardBtn} onClick={() => handleOpenCardModal(column._id)}>\n                    <svg width=\"28\" height=\"28\">\n                      <use xlinkHref={theme !== \"violet\" ?`${url}#buttons-plus` : `${url}#buttons-plus-violet`} />\n                    </svg>\n                    Add another card\n                  </button>\n                </li>\n                \n              ))}\n            </ul>\n            <button\n              className={styles.AddColumBtn}\n              onClick={() => dispatch(openModal(\"columnModal\"))}\n            >\n              <svg width=\"28\" height=\"28\">\n                <use xlinkHref={theme !== \"dark\" ?`${url}#buttons-plus` : `${url}#buttons-plus-violet`} />\n              </svg>\n              Add another column\n            </button>\n            </div>\n          ) : (\n            <button\n              className={styles.AddColumBtn}\n              onClick={() => dispatch(openModal(\"columnModal\"))}\n            >\n              <svg width=\"28\" height=\"28\">\n                <use xlinkHref={theme !== \"dark\" ?`${url}#buttons-plus` : `${url}#buttons-plus-violet`} />\n              </svg>\n              Add another column\n            </button>\n          )}\n        </ul>\n\n        {componentName === \"columnModal\" && (\n          <ModalAddColumn onClose={() => dispatch(closeModal())} />\n        )}\n        {componentName === \"cardModal\" && (\n          <ModalAddCard\n            onClose={() => dispatch(closeModal())}\n            columnId={selectedColumnId}\n          />\n        )}\n\n          {componentName === \"editColumn\" && (\n          <ModalEditColumn\n            onClose={() => dispatch(closeModal())}\n            columnId={selectedColumnId}\n            updateColumn={updateColumnLocally}\n             \n          />\n        )}\n        {componentName === \"editCardModal\" && (\n          <ModalEditCard \n            onClose={() => dispatch(closeModal())}\n            cardId={cardId}\n          />\n        )}\n      </section>\n    </>\n  );\n};\n\nexport default NewBoard;\n\n"],"names":["NewBoard","dispatch","useDispatch","theme","useSelector","state","auth","user","backgroundImage","boards","modalState","modal","allColumns","columns","filter","setFilter","useState","currentImage","setCurrentImage","selectedColumnId","setSelectedColumnId","cardId","setCardId","componentName","location","useLocation","boardName","name","params","useParams","column","boardId","cardsAdded","cards","filteredCards","card","some","col","_id","columnId","displaynonfilteredCards","filteredCardsMaped","priority","payload","useEffect","foundImage","images","find","image","tablet","mobile","updateDeviceType","width","window","innerWidth","addEventListener","removeEventListener","_jsxs","_Fragment","children","_jsx","Header","className","concat","styles","BoardsSection","style","NameFilter","FilterComponent","ColumnsSection","length","ulButton","map","Column","columnName","display","justifyContent","height","onClick","openEditColumnModal","openModal","xlinkHref","url","e","stopPropagation","deleteColumn","id","Cards","title","description","bottomCard","alignItems","gap","Priority","PriorityColor","Deadline","formatDeadline","deadline","Svgs","DeadlineBell","MoveButton","openEditCardModal","deleteCard","AddCardBtn","handleOpenCardModal","AddColumBtn","ModalAddColumn","onClose","closeModal","ModalAddCard","ModalEditColumn","updateColumn","updateColumnLocally","updatedName","updateLocalColumn","ModalEditCard"],"sourceRoot":""}