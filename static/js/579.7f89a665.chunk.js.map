{"version":3,"file":"static/js/579.7f89a665.chunk.js","mappings":"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","sources":["webpack://taskpro/./src/pages/CurrentBoardPage/CurrentBoardPage.module.css?c897","pages/CurrentBoardPage/CurrentBoardPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"BoardsSection\":\"CurrentBoardPage_BoardsSection__hUveN\",\"NameFilter\":\"CurrentBoardPage_NameFilter__dRdit\",\"task-card\":\"CurrentBoardPage_task-card__zju9l\",\"card-without\":\"CurrentBoardPage_card-without__DpdGI\",\"card-low\":\"CurrentBoardPage_card-low__NegAV\",\"card-medium\":\"CurrentBoardPage_card-medium__IhaRb\",\"card-high\":\"CurrentBoardPage_card-high__2Ru0R\",\"card-title\":\"CurrentBoardPage_card-title__TKWaz\",\"card-description\":\"CurrentBoardPage_card-description__QYr-B\",\"bottomCard\":\"CurrentBoardPage_bottomCard__mLWJC\",\"Svgs\":\"CurrentBoardPage_Svgs__JKr+y\",\"columnName\":\"CurrentBoardPage_columnName__Ecl60\",\"DeadlineBell\":\"CurrentBoardPage_DeadlineBell__H+MK-\",\"Cards\":\"CurrentBoardPage_Cards__ij8tf\",\"deadlineBell-high\":\"CurrentBoardPage_deadlineBell-high__-zKxl\",\"Priority\":\"CurrentBoardPage_Priority__fOtNe\",\"Deadline\":\"CurrentBoardPage_Deadline__xMM6U\",\"ColumnsSection\":\"CurrentBoardPage_ColumnsSection__O1jof\",\"ulButton\":\"CurrentBoardPage_ulButton__p4H33\",\"AddColumBtn\":\"CurrentBoardPage_AddColumBtn__VKoAI\",\"AddCardBtn\":\"CurrentBoardPage_AddCardBtn__UFUfo\",\"PriorityColor\":\"CurrentBoardPage_PriorityColor__Goww1\",\"priority-without\":\"CurrentBoardPage_priority-without__XVuOV\",\"priority-low\":\"CurrentBoardPage_priority-low__MJuPB\",\"priority-medium\":\"CurrentBoardPage_priority-medium__ElfxD\",\"priority-high\":\"CurrentBoardPage_priority-high__zEaP6\",\"dark\":\"CurrentBoardPage_dark__6qttL\",\"Column\":\"CurrentBoardPage_Column__pt8VB\",\"violet\":\"CurrentBoardPage_violet__ODall\"};","import { useSelector, useDispatch } from \"react-redux\";\nimport { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport FilterComponent from \"components/FilterComponent/FilterComponent\";\nimport ModalAddColumn from \"components/PopUp/ModalAddColumn/ModalAddColumn\";\nimport ModalEditColumn from \"components/PopUp/ModalEditColumn/ModalEditColumn\";\nimport ModalAddCard from '../../components/PopUp/AddCard/AddCard';\nimport ModalEditCard from \"../../components/PopUp/EditCard/EditCard\";\nimport Header from \"../../components/Header/Header\"; \nimport { openModal, closeModal } from \"../../redux/modal/modalSlice\";\nimport { deleteColumn} from \"../../redux/columns/columnsOperations\";\nimport { getBoardById } from \"../../redux/board/boardOperations\";\nimport { deleteCard } from \"../../redux/cards/cardsOpeartions\";\nimport { updateLocalColumn } from '../../redux/columns/columnSlice';\nimport styles from './CurrentBoardPage.module.css';\nimport images from '../../images/BgImages/images';\nimport { formatDeadline } from '../../services/formatingDate';\nimport MoveButton from \"components/PopUp/MoveTask/MoveTask\";\n\nimport url from '../../components/PopUp/icons.svg';\n\n\nconst CurrentBoardPage = () => {\n  const location = useLocation();\n  const {state} = location;\n  const theme = useSelector(state => state.auth.user.theme);\n  const [showColumnsMap, setShowColumnsMap] = useState([]);\n  const [cardId, setCardId] = useState();\n  const [filter, setFilter] = useState();\n  const dispatch = useDispatch();\n  const modalState = useSelector((state) => state.modal);\n  const { componentName } = modalState;\n  const currentBoard = state.transferedBoard;\n  const editedBoard = state.updates;\n  const backgroundImage = currentBoard.backgroundImage;\n  const currentBoardName = currentBoard.name;\n  const currentBoardSlug= currentBoard.slug;\n\n  const changeName = () => {\n    if (currentBoardName !== editedBoard?.name) {\n      return editedBoard?.name\n    } else {\n      return currentBoardName;\n    }\n  }\n\n  const changeBackgroundImage = () => {\n    if (backgroundImage !== editedBoard?.backgroundImage) {\n      return editedBoard?.backgroundImage\n    } else {\n      return backgroundImage;\n    }\n  }\n  \n  //columns \n  const backendColumns = showColumnsMap;\n  const addedColumns = useSelector((state) => state.columns.columns);\n  const filteredColumns = addedColumns.filter((column) => column.boardName === currentBoardSlug);\n  const columns = backendColumns.concat(filteredColumns);\n  const uniqueColumns = Array.from(new Set(columns.map(column => column._id)))\n  .map(id => columns.find(column => column._id === id));\n  \n  //cards\n  const backendCards = backendColumns.flatMap((column) => column.cards);\n  const cardsAdded = useSelector((state) => state.cards.cards || []);\n  const uniqueCardsAdded = cardsAdded.filter(\n    (card) => !backendCards.some((backendCard) => backendCard._id === card._id)\n  );\n  const cardToDisplay = [\n    ...backendCards,\n    ...uniqueCardsAdded.filter((card) =>\n      columns.some((col) => col._id === card.columnId)\n    ),\n  ];\n\n\n  const [selectedColumnId, setSelectedColumnId] = useState(null);\n  const [currentImage, setCurrentImage] = useState(backgroundImage);\n\n  const handleOpenCardModal = (columnId) => {\n    setSelectedColumnId(columnId);\n    dispatch(openModal(\"cardModal\"));\n  };\n\n\n  useEffect(() => {\n    const foundImage = images.find(\n      (image) =>\n        image.image === backgroundImage ||\n        image.tablet === backgroundImage ||\n        image.mobile === backgroundImage\n    );\n\n    const updateDeviceType = () => {\n      const width = window.innerWidth;\n\n      if (foundImage) {\n        if (width < 768) {\n          setCurrentImage(foundImage.mobile);\n        } else if (width < 1024) {\n          setCurrentImage(foundImage.tablet);\n        } else {\n          setCurrentImage(foundImage.image);\n        }\n      }\n    };\n\n    updateDeviceType();\n    window.addEventListener(\"resize\", updateDeviceType);\n\n    return () => window.removeEventListener(\"resize\", updateDeviceType);\n  }, [backgroundImage]);\n\n  useEffect(() => {\n    const showColumns = async () => {\n      try {\n        const response = await dispatch(getBoardById(currentBoard.slug));\n        setShowColumnsMap(response.payload.columns);\n        return response.payload\n      } catch (error) {\n        console.error(\"Error fetching columns:\", error);\n      }\n    };\n  \n    if (currentBoard.slug) {\n      showColumns();\n    }\n  }, [dispatch, currentBoard.slug,]);\n  const openEditColumnModal = (columnId) => {\n    setSelectedColumnId(columnId);\n    dispatch(openModal(\"editColumn\"))\n  }\n\n  const openEditCardModal = (card) => {\n    setCardId(card)\n    dispatch(openModal(\"editCardModal\"))          \n  }\n\n  const updateColumnLocally = (columnId, updatedName) => {\n    setShowColumnsMap(prevColumns =>\n      prevColumns.map(column =>\n        column._id === columnId ? { ...column, name: updatedName } : column\n      )\n    );\n    dispatch(updateLocalColumn({ id: columnId, name: updatedName }));\n  };\n\n  const updateCardLocally = (updatedCard) => {\n    setShowColumnsMap(prevColumns =>\n      prevColumns.map(column => ({\n        ...column,\n        cards: column.cards.map(card =>\n          card._id === updatedCard._id ? { ...card, ...updatedCard } : card\n        )\n      }))\n    );\n  };\n\n  const deleteBackendColumn = async (column) => {\n      await dispatch(deleteColumn({ boardName: currentBoard.slug, id: column._id }));\n      setShowColumnsMap((prevColumns) => prevColumns.filter((col) => col._id !== column._id));\n  }\n\n  const deleteBackendCards = async (card) => {\n    await dispatch(deleteCard({ boardName: currentBoard.slug, id: card._id }));\n    setShowColumnsMap(prevColumns =>\n      prevColumns.map(column => ({\n        ...column,\n        cards: column.cards.filter(c => c._id !== card._id)\n      })))\n  }\n  \n  const displaynonfilteredCards = () => {\n    if (filter) {\n      const filteredCardsMaped = cardToDisplay.filter((card) => card.priority === filter.payload);\n      if (filter.payload === \"all\") {\n        return cardToDisplay\n      } else {\n        return filteredCardsMaped;\n      }\n    } else {\n        return cardToDisplay;\n    }\n  }\n\n  const refreshBoard = async () => {\n    try {\n      const response = await dispatch(getBoardById(currentBoard.slug));\n      setShowColumnsMap(response.payload.columns);\n    } catch (error) {\n      console.error(\"Error refreshing board:\", error);\n    }\n  };\n  \n  return (\n    <>\n      <Header />\n      <section\n        className={`${styles.BoardsSection} ${styles[theme]}`}\n        style={{backgroundImage: `url(${changeBackgroundImage() || currentImage})`}}\n      >\n        <div className={styles.NameFilter}>\n          <h1>{changeName() || currentBoardName}</h1>\n          <FilterComponent setFilter={setFilter}/>\n        </div>\n\n        <ul className={styles.ColumnsSection}>\n          {uniqueColumns.length > 0 ? (\n            <li className={`${styles.ulButton}`}>\n              {uniqueColumns.map((column) => (\n                <div key={column._id} className={`${styles.Column} ${styles[theme]}`}>\n                  <h2 className={styles.columnName}>\n                    {column.name}\n                    <div style={{width: '40px', display: 'flex', justifyContent: 'space-between'}}>\n                      <svg width=\"16\" height=\"16\" onClick={() => openEditColumnModal(column._id)}>\n                        <use xlinkHref={`${url}#pencil`} />\n                      </svg>\n                      <svg width=\"16\" height=\"16\" onClick={() => deleteBackendColumn(column)}>\n                        <use xlinkHref={`${url}#bin`} />\n                      </svg>\n                    </div>\n                  </h2>\n\n\n                  <ul className={`${styles.Cards} ${styles[theme]}`}>\n                    {displaynonfilteredCards()\n                    .filter((card) => card.columnId === column._id)\n                    .map((card) => (\n\n                    <li key={card._id} className={`${styles[\"task-card\"]} ${styles[`card-${card.priority}`]}`}>\n                      <h2 className={styles[\"card-title\"]}>{card.title}</h2>\n                      <span className={styles[\"card-description\"]}>{card.description}</span>\n                      <div className={`${styles.bottomCard}`}>\n                        <div style={{display: 'flex', alignItems: 'center', gap: '5px'}}>\n                          <span className={`${styles.Priority}`}>\n                            Priority\n                            <div style={{display: 'flex', alignItems: 'center', gap: '5px'}}>\n                            <span className={`${styles.PriorityColor} ${styles[`priority-${card.priority}`]}`}></span>\n                            <h4>{card.priority}</h4>\n                          </div>\n                          </span>\n\n                          <span className={`${styles.Deadline}`}> \n                            Deadline\n                            <h4>{formatDeadline(card.deadline)}</h4>\n                          </span>\n                        </div>\n\n                        <div className={`${styles.Svgs}`}>\n                          <svg width=\"14\" height=\"16\" className={`${styles.DeadlineBell} ${styles[`deadlineBell-${card.priority}`]}`}>\n                            <use xlinkHref={`${url}#bell`} />\n                          </svg>\n                          <MoveButton \n                            boardName={currentBoardSlug} \n                            columnId={column} \n                            cardId={card} \n                            allColumns={uniqueColumns}\n                            triggerRefresh={refreshBoard}\n                          />\n                          <svg width=\"16\" height=\"16\" onClick={() => openEditCardModal(card)}>\n                            <use xlinkHref={`${url}#pencil`} />\n                          </svg>\n                          <svg width=\"16\" height=\"16\" onClick={() => deleteBackendCards(card)}>\n                            <use xlinkHref={`${url}#bin`} />\n                          </svg>\n                        </div>\n                      </div>\n                    </li>\n                    ))}\n                  </ul>\n                  <button className={styles.AddCardBtn} onClick={() => handleOpenCardModal(column._id)}>\n                    <svg width=\"28\" height=\"28\">\n                      <use xlinkHref={theme !== \"violet\" ?`${url}#buttons-plus` : `${url}#buttons-plus-violet`} />\n                    </svg>\n                    Add another card\n                  </button>\n                </div>\n              ))}\n            <button\n              className={styles.AddColumBtn}\n              onClick={() => dispatch(openModal(\"columnModal\"))}\n            >\n              <svg width=\"28\" height=\"28\">\n                <use xlinkHref={theme !== \"dark\" ?`${url}#buttons-plus` : `${url}#buttons-plus-violet`} />\n              </svg>\n              Add another column\n            </button>\n            </li>\n            ) : (\n            <button\n              className={styles.AddColumBtn}\n              onClick={() => dispatch(openModal(\"columnModal\"))}\n            >\n              <svg width=\"28\" height=\"28\">\n                <use xlinkHref={theme !== \"dark\" ?`${url}#buttons-plus` : `${url}#buttons-plus-violet`} />\n              </svg>\n              Add another column\n            </button>\n          )}\n        </ul>\n            \n        {componentName === \"columnModal\" && (\n          <ModalAddColumn onClose={() => dispatch(closeModal())} />\n        )}\n        {componentName === \"cardModal\" && (\n          <ModalAddCard\n            onClose={() => dispatch(closeModal())}\n            columnId={selectedColumnId}\n          />\n        )}\n        {componentName === \"editColumn\" && (\n          <ModalEditColumn\n            onClose={() => dispatch(closeModal())}\n            columnId={selectedColumnId}\n            updateColumn={updateColumnLocally}\n          />\n        )}\n        {componentName === \"editCardModal\" && (\n          <ModalEditCard \n            onClose={() => dispatch(closeModal())}\n            cardId={cardId}\n            updateCard = {updateCardLocally}\n          />\n        )}\n      </section>\n    </>\n  );\n};\n\nexport default CurrentBoardPage;"],"names":["CurrentBoardPage","location","useLocation","state","theme","useSelector","auth","user","showColumnsMap","setShowColumnsMap","useState","cardId","setCardId","filter","setFilter","dispatch","useDispatch","modalState","modal","componentName","currentBoard","transferedBoard","editedBoard","updates","backgroundImage","currentBoardName","name","currentBoardSlug","slug","backendColumns","addedColumns","columns","filteredColumns","column","boardName","concat","uniqueColumns","Array","from","Set","map","_id","id","find","backendCards","flatMap","cards","cardsAdded","uniqueCardsAdded","card","some","backendCard","cardToDisplay","col","columnId","selectedColumnId","setSelectedColumnId","currentImage","setCurrentImage","useEffect","foundImage","images","image","tablet","mobile","updateDeviceType","width","window","innerWidth","addEventListener","removeEventListener","async","response","getBoardById","payload","error","console","showColumns","displaynonfilteredCards","filteredCardsMaped","priority","refreshBoard","_jsxs","_Fragment","children","_jsx","Header","className","styles","BoardsSection","style","NameFilter","FilterComponent","ColumnsSection","length","ulButton","Column","columnName","display","justifyContent","height","onClick","openEditColumnModal","openModal","xlinkHref","url","deleteColumn","prevColumns","deleteBackendColumn","Cards","title","description","bottomCard","alignItems","gap","Priority","PriorityColor","Deadline","formatDeadline","deadline","Svgs","DeadlineBell","MoveButton","allColumns","triggerRefresh","openEditCardModal","deleteCard","_objectSpread","c","deleteBackendCards","AddCardBtn","handleOpenCardModal","AddColumBtn","ModalAddColumn","onClose","closeModal","ModalAddCard","ModalEditColumn","updateColumn","updateColumnLocally","updatedName","updateLocalColumn","ModalEditCard","updateCard","updatedCard"],"sourceRoot":""}